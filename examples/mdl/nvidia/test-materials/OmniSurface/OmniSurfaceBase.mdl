/***************************************************************************************************
 * Copyright 2024 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

// Implementation of OmniSurfaceBase material

mdl 1.7;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::limits::*;
import ::math::*;
import ::state::*;
import ::tex::*;

// Using absolute path to OmniShared library
import ::OmniSurface::OmniShared::*;

export material OmniSurfaceBase(

    //Diffuse reflection
    //
    float diffuse_reflection_weight = float(0.8) [[ 
        anno::display_name("Weight"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],
    
    color diffuse_reflection_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Base")
    ]],
    
    float diffuse_reflection_roughness = float(0.0) [[ 
        anno::display_name("Diffuse Roughness"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    //Metalness
    //
    float metalness = float(0.0) [[ 
        anno::display_name("Metalness"),
        anno::in_group("Base"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    //Specular reflection
    //
    float specular_reflection_weight = float(1.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    color specular_reflection_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Specular")
    ]],

    float specular_reflection_roughness = float(0.2) [[ 
        anno::display_name("Roughness"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform ::OmniSurface::OmniShared::ior_presets specular_reflection_ior_preset = 
        ::OmniSurface::OmniShared::ior_custom [[
        anno::display_name("IOR Preset"),
        anno::in_group("Specular")
    ]],
    
    uniform float specular_reflection_ior = float(1.5) [[ 
        anno::display_name("IOR"),    
        anno::in_group("Specular"),
        anno::soft_range(1.0f, 5.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    float specular_reflection_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Specular"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float specular_reflection_anisotropy_rotation = float(0.0) [[ 
        anno::display_name("Rotation (radian)"),
        anno::in_group("Specular"),
        anno::soft_range(0.0f, 1.0f)
    ]],

    //Specular transmission
    //
    uniform bool enable_specular_transmission = false [[
        anno::display_name("Enable Transmission"),
        anno::description("Enables the use of transmission"),
        anno::in_group("Transmission")
    ]],

    float specular_transmission_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Transmission"),
        anno::hard_range(0.0f, 1.0f)
    ]],
    
    color specular_transmission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Transmission")
    ]],

    float specular_transmission_scattering_depth = float(0.0) [[ 
        anno::display_name("Depth"),
        anno::in_group("Transmission"),
        anno::soft_range(0.0f, 100.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
        
    ]],

    color specular_transmission_scattering_color = color(0.0) [[ 
        anno::display_name("Scatter"),
        anno::in_group("Transmission")
    ]],

    float specular_transmission_scatter_anisotropy = float(0.0) [[ 
        anno::display_name("Scatter Anisotropy"),
        anno::in_group("Transmission"),
        anno::hard_range(-1.0f, 1.0f)
    ]],

    uniform float specular_transmission_dispersion_abbe = float(0.0) [[ 
        anno::display_name("Dispersion Abbe"),    
        anno::in_group("Transmission"),
        anno::soft_range(0.0f, 100.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    //Subsurface
    //
    uniform bool enable_diffuse_transmission = false [[
        anno::display_name("Enable Subsurface"),
        anno::description("Enables the use of subsurface"),
        anno::in_group("Subsurface")
    ]],

    float subsurface_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Subsurface"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform ::OmniSurface::OmniShared::scattering_colors_presets subsurface_scattering_colors_preset = 
        ::OmniSurface::OmniShared::scattering_colors_custom [[
        anno::display_name("Scattering Presets"),
        anno::in_group("Subsurface")
    ]],

    color subsurface_transmission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Subsurface")
    ]],

    color subsurface_scattering_color = color(1.0) [[
        anno::display_name("Radius (mfp)"),
        anno::in_group("Subsurface")
    ]],

    float subsurface_scale = float(1.0) [[
        anno::display_name("Scale"),
        anno::in_group("Subsurface"),
        anno::soft_range(0.0f, 10.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    float subsurface_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Subsurface"),
        anno::hard_range(-1.0f, 1.0f)
    ]],

    //Coat
    //
    float coat_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    color coat_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Coat")
    ]],

    float coat_roughness = float(0.1) [[ 
        anno::display_name("Roughness"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform ::OmniSurface::OmniShared::ior_presets coat_ior_preset = 
        ::OmniSurface::OmniShared::ior_custom [[
        anno::display_name("IOR Preset"),
        anno::in_group("Coat")
    ]],

    uniform float coat_ior = float(1.5) [[ 
        anno::display_name("IOR"),    
        anno::in_group("Coat"),
        anno::soft_range(1.0f, 5.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    float coat_anisotropy = float(0.0) [[ 
        anno::display_name("Anisotropy"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float coat_anisotropy_rotation = float(0.0) [[ 
        anno::display_name("Rotation (radian)"),
        anno::in_group("Coat"),
        anno::soft_range(0.0f, 1.0f)
    ]],

    float coat_affect_color = float(0.0) [[
        anno::display_name("Affect Color"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float coat_affect_roughness = float(0.0) [[
        anno::display_name("Affect Roughness"),
        anno::in_group("Coat"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float3 coat_normal = state::normal() [[
        anno::display_name("Normal"),
        anno::in_group("Coat"),
        anno::usage("normal")
    ]],

    //Specular retro-reflection
    //
    float specular_retro_reflection_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Sheen"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    color specular_retro_reflection_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Sheen")
    ]],

    float specular_retro_reflection_roughness = float(0.3) [[ 
        anno::display_name("Roughness"),
        anno::in_group("Sheen"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    //Emission
    //
    float emission_weight = float(0.0) [[ 
        anno::display_name("Weight"),
        anno::in_group("Emission"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform ::OmniSurface::OmniShared::emission_mode emission_mode = 
        ::OmniSurface::OmniShared::emission_lx [[
        anno::display_name("Emission Mode"),
        anno::in_group("Emission")
    ]],
    
    float emission_intensity = float(1.0) [[
        anno::display_name("Intensity"),
        anno::in_group("Emission"),
        anno::soft_range(0.0f, 1000.0f)
    ]],

    color emission_color = color(1.0) [[
        anno::display_name("Color"),
        anno::in_group("Emission")
    ]],

    uniform bool emission_use_temperature = false [[ 
        anno::display_name("Use Temperature"),
        anno::in_group("Emission")
    ]],

    float emission_temperature = float(6500.0) [[
        anno::display_name("Temperature (kelvin)"),
        anno::in_group("Emission"),
        anno::soft_range(0.0f, 10000.0f)
    ]],

    //Thin Film
    //
    uniform bool enable_thin_film = false [[ 
        anno::display_name("Enable Thin Film"),
        anno::description("Enable the use of thin film"),
        anno::in_group("Thin Film")
    ]],

    float thin_film_thickness = float(400.0) [[
        anno::display_name("Thickness (nm)"),
        anno::in_group("Thin Film"),
        anno::soft_range(0.0f, 2000.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    uniform ::OmniSurface::OmniShared::ior_presets thin_film_ior_preset = 
        ::OmniSurface::OmniShared::ior_custom [[
        anno::display_name("IOR Preset"),
        anno::in_group("Thin Film")
    ]],

    uniform float thin_film_ior = float(1.52) [[
        anno::display_name("IOR"),
        anno::in_group("Thin Film"),
        anno::soft_range(1.0f, 3.0f),
        anno::hard_range(0.0f, limits::FLOAT_MAX)
    ]],

    //Geometry
    //
    uniform bool thin_walled = false [[ 
        anno::display_name("Thin Walled"),
        anno::description("Thin surface with no interior."),
        anno::in_group("Geometry")
    ]],

    uniform bool enable_opacity = false [[
        anno::display_name("Enable Opacity"),
        anno::description("Enables the use of cutout opacity"),
        anno::in_group("Geometry")
    ]],
    
    float geometry_opacity = float(1.0) [[
        anno::display_name("Opacity"),
        anno::in_group("Geometry"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    uniform float geometry_opacity_threshold = float(0.0) [[
        anno::display_name("Opacity Threshold"),
        anno::description("If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"),
        anno::in_group("Geometry"),
        anno::hard_range(0.0f, 1.0f)
    ]],

    float3 geometry_normal = state::normal() [[
        anno::display_name("Geometry Normal"),
        anno::in_group("Geometry"),
        anno::usage("normal")
    ]],

    float3 geometry_displacement = float3(0.0) [[
        anno::display_name("Displacement"),
        anno::in_group("Geometry")
    ]]
)
[[  
    anno::display_name("OmniSurfaceBase"),
    anno::description("A base material for modeling a variety of surfaces."),
    anno::author("NVIDIA Corporation"),
    anno::key_words(string[]("generic", "surface")),
    anno::version(1, 0, 0, "")
    
]] = let {

    //Constants
    float epsilon = 1.e-5;

    //Thin film BRDF
    float thin_film_ior_value = ::OmniSurface::OmniShared::ior_preset_to_value(
        thin_film_ior_preset, 
        thin_film_ior);

    //Coat - Dielectric microfacet BRDF
    float coat_roughness_2 = coat_roughness * coat_roughness;
    float2 coat_roughness_anisotropy = 
        coat_anisotropy != 0.0f ?
            ::OmniSurface::OmniShared::compute_anisotropy(coat_roughness_2, coat_anisotropy):
            float2(coat_roughness_2);

    float coat_roughness_u = coat_roughness_anisotropy.x; 
    float coat_roughness_v = coat_roughness_anisotropy.y; 
    float3 coat_tangent_u = 
        coat_roughness_anisotropy != 0.0f ? 
            coat_anisotropy_rotation != 0.0f ?
                ::OmniSurface::OmniShared::rotate_tangent(
                    state::texture_tangent_u(0), 
                    coat_anisotropy_rotation) :
                state::texture_tangent_u(0) : 
            state::texture_tangent_u(0);

    float coat_ior_value = ::OmniSurface::OmniShared::ior_preset_to_value(
        coat_ior_preset, 
        coat_ior);

    ::OmniSurface::OmniShared::fresnel_reflectivity coat_fresnel_reflectivity = 
        ::OmniSurface::OmniShared::approximate_fresnel(
            coat_ior_value, 
            coat_roughness_2);

    color coat_multiscatter_tint = color(0.92); //heuristic

    bsdf coat_brdf = df::microfacet_ggx_smith_bsdf(
        roughness_u: coat_roughness_u,
        roughness_v: coat_roughness_v,
        tint: color(1.0),
        multiscatter_tint: coat_multiscatter_tint,
        tangent_u: coat_tangent_u,
        mode: df::scatter_reflect);

    //Specular reflection - Dielectric microfacet BRDF
    float specular_reflection_roughness_2 = 
        specular_reflection_roughness * specular_reflection_roughness;

    float coat_affect_roughness_coefficient = 
        (coat_weight * coat_roughness_2 * coat_affect_roughness);

    float specular_reflection_roughness_coefficient = 
        math::lerp(specular_reflection_roughness_2, 1.0f, coat_affect_roughness_coefficient);

    float2 specular_reflection_roughness_anisotropy = 
        specular_reflection_anisotropy != 0.0f ?
            ::OmniSurface::OmniShared::compute_anisotropy(
                specular_reflection_roughness_coefficient, 
                specular_reflection_anisotropy) :
            float2(specular_reflection_roughness_coefficient);

    float specular_reflection_roughness_u = specular_reflection_roughness_anisotropy.x; 
    float specular_reflection_roughness_v = specular_reflection_roughness_anisotropy.y; 

    float3 specular_reflection_tangent_u = 
        specular_reflection_roughness_anisotropy != 0.0f ? 
            specular_reflection_anisotropy_rotation != 0.0f ?
                ::OmniSurface::OmniShared::rotate_tangent(
                    state::texture_tangent_u(0),
                    specular_reflection_anisotropy_rotation) :
                state::texture_tangent_u(0) : 
            state::texture_tangent_u(0);

    float specular_reflection_ior_value = ::OmniSurface::OmniShared::ior_preset_to_value(
        specular_reflection_ior_preset, 
        specular_reflection_ior);

    ::OmniSurface::OmniShared::fresnel_reflectivity specular_reflection_fresnel_reflectivity = 
        ::OmniSurface::OmniShared::approximate_fresnel(
            specular_reflection_ior_value, 
            specular_reflection_roughness_2);

    color specular_reflection_multiscatter_tint = 
        specular_reflection_color * color(0.92); //heuristic

    bsdf specular_reflection_to_combine_with_specular_retro_reflection_brdf =
        df::microfacet_ggx_smith_bsdf(
            roughness_u: specular_reflection_roughness_u,
            roughness_v: specular_reflection_roughness_v,
            tint: specular_reflection_color,
            multiscatter_tint: specular_reflection_multiscatter_tint,
            tangent_u: specular_reflection_tangent_u,
            mode: df::scatter_reflect);

    color specular_transmission_tint =
        thin_walled || (specular_transmission_scattering_depth == 0.0f) ? 
            specular_transmission_color : 
            color(1.0);

    bsdf specular_reflection_to_combine_with_specular_transmission_base_brdf_no_film =
        df::microfacet_ggx_smith_bsdf(
            tint: color(1.0f),
            multiscatter_tint: specular_reflection_multiscatter_tint,
            roughness_u: specular_reflection_roughness_u,
            roughness_v: specular_reflection_roughness_v,
            tangent_u: specular_reflection_tangent_u,
            mode: df::scatter_reflect_transmit);

    bsdf specular_reflection_to_combine_with_specular_transmission_base_brdf =
        enable_thin_film ?
            df::thin_film(
                ior: color(thin_film_ior_value),
                thickness: thin_film_thickness,
                base: specular_reflection_to_combine_with_specular_transmission_base_brdf_no_film) :
            specular_reflection_to_combine_with_specular_transmission_base_brdf_no_film;


    bsdf specular_reflection_to_combine_with_specular_transmission_brdf =
        df::tint(
            reflection_tint: specular_reflection_color,
            transmission_tint: specular_transmission_tint,
            base: specular_reflection_to_combine_with_specular_transmission_base_brdf);

    //Metal - Conductor microfacet BRDF
    float metal_roughness_u = specular_reflection_roughness_u;
    float metal_roughness_v = specular_reflection_roughness_v;
    float3 metal_tangent_u  = specular_reflection_tangent_u;

    color metal_multiscatter_tint = color(1.0);

    bsdf metal_base_brdf = df::microfacet_ggx_smith_bsdf(
        roughness_u: metal_roughness_u,
        roughness_v: metal_roughness_v,
        tint: color(1.0),
        multiscatter_tint: metal_multiscatter_tint,
        tangent_u: metal_tangent_u,
        mode: df::scatter_reflect);

    color metal_base_color = diffuse_reflection_color * diffuse_reflection_weight;
    color metal_edge_color = specular_reflection_color * specular_reflection_weight;
    ::OmniSurface::OmniShared::metal_complex_ior metal_ior = 
        ::OmniSurface::OmniShared::compute_artistic_to_conductor_fresnel(
            metal_base_color, 
            metal_edge_color);

    bsdf metal_brdf_fresnel_factored = df::fresnel_factor(
        ior: metal_ior.n,
        extinction_coefficient: metal_ior.k,
        base: metal_base_brdf);

    bsdf metal_brdf = enable_thin_film ?
            df::thin_film(
            ior: color(thin_film_ior_value),
            thickness: thin_film_thickness,
            base: metal_brdf_fresnel_factored
        ) :
        metal_brdf_fresnel_factored;

    //Specular transmission - Dielectric microfacet BTDF
    float specular_transmission_roughness_u = specular_reflection_roughness_u;
    float specular_transmission_roughness_v = specular_reflection_roughness_v;
    float3 specular_transmission_tangent_u = specular_reflection_tangent_u;

    float specular_transmission_ior = specular_reflection_ior_value;
    color specular_transmission_ior_color = 
        specular_transmission_dispersion_abbe > 0.0f ?
            base::abbe_number_ior(specular_transmission_ior, specular_transmission_dispersion_abbe) :
            color(specular_transmission_ior);

    bsdf specular_transmission_weak_roughness_btdf = df::microfacet_ggx_smith_bsdf(
        roughness_u: specular_transmission_roughness_u,
        roughness_v: specular_transmission_roughness_v,
        tint: specular_transmission_tint,
        multiscatter_tint: color(1.0),
        tangent_u: specular_transmission_tangent_u,
        mode: df::scatter_transmit); //OM-27060

    bsdf specular_transmission_strong_roughness_btdf = df::diffuse_transmission_bsdf(
        tint: specular_transmission_tint);

    float specular_transmission_weak_to_strong_roughness_threshold = 0.35f;
    float specular_transmission_weak_to_strong_roughness_offset = 0.35f;

    float specular_transmission_weak_to_strong_roughness_blend = 
        specular_reflection_roughness > specular_transmission_weak_to_strong_roughness_threshold ?
            specular_reflection_roughness - specular_transmission_weak_to_strong_roughness_offset :
            0.0f;

    bsdf specular_transmission_btdf = df::weighted_layer(
        weight: specular_transmission_weak_to_strong_roughness_blend,
        normal: state::normal(),
        base: specular_transmission_weak_roughness_btdf,
        layer: specular_transmission_strong_roughness_btdf
    );

    ::OmniSurface::OmniShared::volume_coefficients specular_transmission_vdf_coefficients = 
        ::OmniSurface::OmniShared::compute_transmission_volume_coefficients(
            specular_transmission_color,
            specular_transmission_scattering_color,
            ::state::meters_per_scene_unit() * specular_transmission_scattering_depth);

    float current_specular_transmission_weight = 
        enable_specular_transmission ? 
            specular_transmission_weight : 
            0.0f;

    //Specular retro-reflection - Retro-reflective dielectric microfacet BRDF
    float specular_retro_reflection_roughness_2 = 
        specular_retro_reflection_roughness * specular_retro_reflection_roughness;

    color specular_retro_reflection_multiscatter_tint = 
        specular_retro_reflection_color * color(0.92); //heuristic

    //bsdf specular_retro_reflection_brdf = df::sheen_bsdf(
    //    roughness: math::max(specular_retro_reflection_roughness_2, epsilon),
    //    tint: specular_retro_reflection_color,
    //    multiscatter_tint: specular_retro_reflection_multiscatter_tint);
    
    //Diffuse reflection - Diffuse microfacet BRDF 
    float coat_gamma = 1.0f + coat_affect_color * math::clamp(coat_weight, 0.0f, 1.0f);
    color diffuse_color = 
        math::pow(diffuse_reflection_color * diffuse_reflection_weight, coat_gamma);

    bsdf diffuse_reflection_bsdf = df::diffuse_reflection_bsdf(
        tint: diffuse_color,
        roughness: diffuse_reflection_roughness);

    //Subsurface preset
    ::OmniSurface::OmniShared::scattering_colors scattering_colors =
        ::OmniSurface::OmniShared::scattering_colors_preset_to_value(
            subsurface_scattering_colors_preset,
            subsurface_transmission_color,
            subsurface_scattering_color);

    //Diffuse transmission - Diffuse microfacet BTDF
    color diffuse_transmission_color = thin_walled ?
        scattering_colors.scattering_transmission_color :
        color(1.0);

    bsdf diffuse_transmission_btdf = df::diffuse_transmission_bsdf(
        tint: diffuse_transmission_color);

    float bounded_subsurface_scale = math::max(epsilon, subsurface_scale);
    ::OmniSurface::OmniShared::volume_coefficients subsurface_vdf_coefficients = 
        ::OmniSurface::OmniShared::compute_subsurface_volume_coefficients(
            scattering_colors.scattering_transmission_color,
            scattering_colors.scattering_scattering_color,
            subsurface_anisotropy,
            ::state::meters_per_scene_unit() * bounded_subsurface_scale);

    float current_subsurface_weight = 
        enable_diffuse_transmission ? 
            subsurface_weight : 
            0.0f;

    //Emission - Diffuse emission
    uniform float emission_unit_intensity = 
        (emission_mode == ::OmniSurface::OmniShared::emission_lx) ? 
            1.0f : 
            math::PI;

    color emission_coat_affect = math::lerp(color(1.0), coat_color, coat_weight);

    color emission_final_color = 
        emission_use_temperature ? 
            math::blackbody(emission_temperature) : 
            emission_color;

    color emission_final_intensity = 
        emission_weight * emission_intensity * emission_unit_intensity * 
        emission_final_color * emission_coat_affect;

    material_emission emission = material_emission(
        emission: 
            df::directional_factor(
                normal_tint: math::lerp(
                    color(1.0), 
                    color(1.0 - coat_fresnel_reflectivity.nr), 
                    coat_weight
                ),
                grazing_tint: math::lerp(
                    color(1.0), 
                    color(1.0 - coat_fresnel_reflectivity.gr), 
                    coat_weight
                ),
                exponent: 4.0f, //heuristic
                base: df::diffuse_edf()
            ),
        intensity: emission_final_intensity,
        mode: intensity_radiant_exitance);

    //Layering
    //
    //Diffuse transmission | Diffuse reflection
    bsdf diffuse_reflection_bsdf_mix = df::weighted_layer(
        weight: current_subsurface_weight,
        normal: geometry_normal,
        base: df::weighted_layer(
            weight: 1.0f,
            normal: geometry_normal,
            base: bsdf(),
            layer: diffuse_reflection_bsdf
        ),
        layer: diffuse_transmission_btdf
    );

    //Diffuse reflection | Specular retro reflection
    bsdf specular_retro_reflection_brdf = df::sheen_bsdf(
        roughness: specular_retro_reflection_roughness_2,
        tint: specular_retro_reflection_color,
        multiscatter_tint: specular_retro_reflection_multiscatter_tint,
        multiscatter: diffuse_reflection_bsdf_mix
    );

    bsdf specular_retro_reflection_brdf_mix = df::weighted_layer(
        weight: specular_retro_reflection_weight,
        normal: geometry_normal,
        base: diffuse_reflection_bsdf_mix,
        layer: specular_retro_reflection_brdf
    );

    //Specular retro reflection | Specular reflection
    bsdf specular_reflection_with_specular_retro_reflection_brdf_mix = df::custom_curve_layer( 
        weight: specular_reflection_weight,
        normal: geometry_normal,
        normal_reflectivity: specular_reflection_fresnel_reflectivity.nr,
        grazing_reflectivity: specular_reflection_fresnel_reflectivity.gr,
        exponent: 4.0f, //heuristic
        base: specular_retro_reflection_brdf_mix,
        layer: specular_reflection_to_combine_with_specular_retro_reflection_brdf
    );

    //Specular transmission | Specular reflection
    bsdf specular_reflection_with_specular_transmission_brdf_mix = df::weighted_layer(
        weight: specular_reflection_weight,
        normal: geometry_normal,
        base: specular_transmission_btdf,
        layer: specular_reflection_to_combine_with_specular_transmission_brdf
    );

    //Specular reflection with specular retro reflection | Specular reflection with specular transmission
    bsdf specular_reflection_brdf_mix = df::weighted_layer(
        weight: current_specular_transmission_weight,
        normal: geometry_normal,
        base: specular_reflection_with_specular_retro_reflection_brdf_mix,
        layer: specular_reflection_with_specular_transmission_brdf_mix
    );

    //Specular reflection | Metal
    bsdf metal_brdf_mix = df::weighted_layer(
        weight: metalness,
        normal: geometry_normal,
        base: specular_reflection_brdf_mix,
        layer: metal_brdf
    ); 

    //Metal | Coat
    bsdf coat_brdf_mix = df::custom_curve_layer(
        normal_reflectivity: coat_fresnel_reflectivity.nr,
        grazing_reflectivity: coat_fresnel_reflectivity.gr,
        weight: coat_weight,
        layer: coat_brdf,
        base: df::tint(
            tint: math::lerp(color(1.0), coat_color, coat_weight), 
            base: metal_brdf_mix
        ),
        normal: coat_normal
    );

    //Surface
    material_surface surface = material_surface(
        scattering: coat_brdf_mix,
        emission: emission
    );

    //Back Surface
    material_surface back_surface = material_surface(
        scattering: bsdf(), 
        emission: material_emission(
            emission: edf(), 
            intensity: color(0.0), 
            mode: intensity_radiant_exitance
        )
    );

    //Volume
    float specular_transmission_scatter_anisotropy_lower_bound = -0.99f; //heuristic, to avoid artifacts
    float subsurface_anisotropy_upper_bound = 0.99f;                     //heuristic, to avoid artifacts
    float volume_directional_bias_mix = 
        thin_walled || 
        (current_specular_transmission_weight == 0.0f && current_subsurface_weight == 0.0f) ?
            0.0f :
            math::lerp(
                math::min(
                    subsurface_anisotropy_upper_bound, 
                    subsurface_anisotropy
                ) * current_subsurface_weight,
                math::max(
                    specular_transmission_scatter_anisotropy_lower_bound, 
                    specular_transmission_scatter_anisotropy
                ),
                current_specular_transmission_weight
            );

    vdf volume_vdf_mix = df::anisotropic_vdf(
        directional_bias: volume_directional_bias_mix
    );

    color volume_scattering_coefficient_mix = 
        (current_specular_transmission_weight == 0.0f && current_subsurface_weight == 0.0f) ?
            color() :
            math::lerp(
                subsurface_vdf_coefficients.scattering * current_subsurface_weight, 
                specular_transmission_vdf_coefficients.scattering,
                current_specular_transmission_weight
            );

    color volume_absorption_coefficient_mix = 
        (current_specular_transmission_weight == 0.0f && current_subsurface_weight == 0.0f) ?
            color() :
            math::lerp(
                subsurface_vdf_coefficients.absorption * current_subsurface_weight, 
                specular_transmission_vdf_coefficients.absorption,
                current_specular_transmission_weight
            );

    material_volume volume = 
        material_volume(
            scattering: volume_vdf_mix,
            scattering_coefficient: 
                thin_walled ? 
                    color(0.0) :
                    volume_scattering_coefficient_mix,

            absorption_coefficient: 
                thin_walled ? 
                    color(0.0) :
                    volume_absorption_coefficient_mix
        );

    //Geometry
    material_geometry geometry = material_geometry(
        displacement: geometry_displacement,
        cutout_opacity: enable_opacity ? 
            geometry_opacity_threshold == 0.0f ? 
                geometry_opacity : 
                (geometry_opacity >= geometry_opacity_threshold ? 1.0f : 0.0f) : 
            1.0f,
        normal: state::normal()
    );

} in material(
    thin_walled: thin_walled,
    ior: specular_transmission_ior_color,
    surface: surface,
    backface: back_surface,
    volume: volume,
    geometry: geometry
);