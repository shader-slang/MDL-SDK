/***************************************************************************************************
 * Copyright 2024 NVIDIA Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************************************/

mdl 1.7;

import ::df::*;
import ::state::*;
import ::math::*;
import ::base::*;
import ::tex::*;
import ::anno::*;
import ::anno::*;

export material OmniPBRBase(

	
    //  Albdeo  //

	color diffuse_reflection_color = color(0.2) [[
		anno::display_name("Albedo Color"),
		anno::description("This is the albedo base color"),
		anno::in_group("Albedo")
	]],
	color diffuse_tint = color(1.0) [[
		anno::display_name("Albedo Tint"),
		anno::description("When enabled, this color value is multiplied over the final albedo color"),
		anno::in_group("Albedo")
	]],

	
	//  Reflecitivity //
	
	float specular_reflection_roughness = float(0.5) [[
		anno::display_name("Roughness"),
		anno::description("Higher roughness values lead to more blurry reflections"),
		anno::in_group("Reflectivity"),
		anno::hard_range(float(0.0), float(1.0))
	]],
	float metalness = float(0.0) [[
		anno::display_name("Metalness"),
		anno::description("Bias towards pure specular reflection"),
		anno::in_group("Reflectivity"),
		anno::hard_range(float(0.0), float(1.0))
	]],	
	float specular_level = float(0.5) [[
		anno::display_name("Specular"),
		anno::description("The specular level (intensity) of the material"),
		anno::in_group("Reflectivity"),
		anno::soft_range(float(0.0), float(1.0))
	]],


	//  Emission  //
	
	uniform bool enable_emission = false [[
        	anno::display_name("Enable Emission"),
		anno::description("Enables the emission of light from the material"),
		anno::in_group("Emissive")
	]],
	color emission_color = color(1.0,0.1,0.1) [[
		anno::display_name("Emissive Color"),
		anno::description("The emission color"),
		anno::in_group("Emissive"),
		anno::enable_if("enable_emission == true")
	]],
	uniform float emission_intensity = float(40.0) [[
		anno::display_name("Emissive Intensity"),    
		anno::description("Intensity of the emission"),
		anno::in_group("Emissive"),
		anno::enable_if("enable_emission == true")
	]],

	
    //  Geometry Opacity  //
	
    uniform bool enable_opacity = false [[
		anno::display_name("Enable Opacity"),
		anno::description("Enables the use of cutout opacity"),
		anno::in_group("Opacity")
	]],
	float geometry_opacity = float(1.0) [[
		anno::display_name("Opacity Amount"),    
		anno::description("Opacity value between 0 and 1, when Opacity Map is not valid"),
		anno::in_group("Opacity"),
		anno::hard_range(float(0.0), float(1.0))
	]],
	uniform float geometry_opacity_threshold = 0.f
	[[
		anno::hard_range(0.0, 1.0),
		anno::display_name("Opacity Threshold"),
		anno::description("If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"),
		anno::in_group("Opacity")
	]],

	
	//  Clearcoat // 
	
    uniform bool enable_coat = false [[
		anno::display_name("Enable Clearcoat Layer"),
		anno::description("Adds a coat layer on top of the material when enabled"),
		anno::in_group("Clearcoat")
	]],
	float coat_weight = float(1.0) [[
		anno::display_name("Clearcoat Weight"),
		anno::description("Sets the weight for coat layer"),
		anno::in_group("Clearcoat"),
		anno::hard_range(float(0.0), float(1.0))
	]],
	color coat_color = color(1.0) [[
		anno::display_name("Clearcoat Tint"),
		anno::description("Clearcoat is tinted and affects the underlying material"),
		anno::in_group("Clearcoat")
	]],
	float coat_transparency = float(1.0) [[
		anno::display_name("Clearcoat Transparency"),
		anno::description("Adjusts the transparency of the coat. Can be turned into a fully opaque coat covering the underlying layer"),
		anno::in_group("Clearcoat"),
		anno::hard_range(float(0.0), float(1.0))
	]],
	float coat_roughness = float(0.0) [[
		anno::display_name("Clearcoat Roughness"),
		anno::description("Higher roughness values lead to more blurry reflections"),
		anno::in_group("Clearcoat"),
		anno::hard_range(float(0.0), float(1.0))
	]],
	float coat_ior = float(1.56) [[
		anno::display_name("Clearcoat IOR"),
		anno::description("Sets the Index of refraction for the coat layer"),
		anno::in_group("Clearcoat"),
		anno::soft_range(float(0.0), float(4.0))
	]],
    float3 clearcoat_geometry_normal = state::normal() [[
        anno::display_name("Clearcoat Normal"),
        anno::in_group("Clearcoat"),
        anno::usage("normal")
    ]],
    float3 geometry_normal = state::normal() [[
        anno::display_name("Geometry Normal"),
        anno::in_group("Geometry"),
        anno::usage("normal")
    ]]

) 
[[
	anno::display_name("OmniPBR Base"),
	anno::description("OmniPBR Base with support for clear coat, opacity and ORM textures."),
 	anno::in_group("Base"),
	anno::version( 2, 1, 1),
	anno::author("NVIDIA CORPORATION"), 
	anno::key_words(string[]("omni", "PBR", "opacity", "omniverse", "generic"))
]]
 = let{

    //  Difuse Bsdf  //	
    
    color tinted_diffuse_color = diffuse_reflection_color * diffuse_tint;

    color base_color = tinted_diffuse_color;

    bsdf diffuse_bsdf = df::weighted_layer(
		weight: 1.0,
		layer:  df::diffuse_reflection_bsdf(
			        tint:       base_color,
			        roughness:  float(0.0)
                ),
		base:   bsdf(),
		normal: enable_coat ? geometry_normal : state::normal()
	);

	//  Glossy Reflection Bsdf  //

	bsdf ggx_smith_bsdf = df::microfacet_ggx_smith_bsdf(
		roughness_u:    specular_reflection_roughness * specular_reflection_roughness,
		roughness_v:    specular_reflection_roughness * specular_reflection_roughness,
		tint:           color(1.0),
		mode:           df::scatter_reflect
	);
	
	bsdf custom_curve_layer_bsdf = df::custom_curve_layer(
		normal_reflectivity:  0.08,		
		grazing_reflectivity: 1.0,
		exponent:	          5.0,
		weight:	              specular_level,
		layer:                ggx_smith_bsdf,
		base:	              diffuse_bsdf,
		normal:               enable_coat ? geometry_normal : state::normal()
	);
	
	bsdf directional_factor_bsdf = df::tint(base_color, ggx_smith_bsdf);
	
	//  Clear Coat  // 

	bsdf omni_PBR_bsdf = df::weighted_layer(
        weight:     metalness,
        layer:	    directional_factor_bsdf,
		base:	    custom_curve_layer_bsdf,
		normal:     enable_coat ? geometry_normal : state::normal() 
	);
	
	bsdf coat_bsdf = df::microfacet_ggx_smith_bsdf(
		roughness_u: coat_roughness * coat_roughness,
		roughness_v: coat_roughness * coat_roughness,
		tint:        color(1.0),
		mode:        df::scatter_reflect
	);
	
	bsdf opaque_coat = df::weighted_layer(
        weight:     coat_transparency,
		layer:	    ::df::tint( 
					    tint: coat_color,
					    base: omni_PBR_bsdf
                    ),
		base:	    ::df::diffuse_reflection_bsdf(
					    tint: coat_color
                    )
	);
	
	bsdf omni_PBR_coated_bsdf = df::fresnel_layer(
		ior:     coat_ior,
		weight:  coat_weight,
		layer:   coat_bsdf,
		base:    opaque_coat,
		normal:  clearcoat_geometry_normal 
	);
	
    bsdf final_bsdf = enable_coat ? omni_PBR_coated_bsdf : omni_PBR_bsdf;
                                    
    color emission_value = enable_emission ? emission_color * color(emission_intensity) : color(0.0);
	
	float opacity_value = geometry_opacity;
    float cutout_opacity = enable_opacity ? ((geometry_opacity_threshold == 0.0) ? opacity_value : ((opacity_value >= geometry_opacity_threshold) ? 1.0 : 0)) : 1.0;
 
    material_emission emission = material_emission(
                                    df::diffuse_edf(),
                                    intensity: emission_value 
                                    );

    material_surface surface =  material_surface(
		                            scattering: final_bsdf,
		                            emission:   emission
		                            );

    material_geometry geometry = material_geometry(
                                    normal: enable_coat ? state::normal(): geometry_normal,
                                    cutout_opacity: cutout_opacity
                                    );

} in material(
	surface: surface,
	geometry: geometry
);
